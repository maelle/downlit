> # Bare code
> cat(downlit_md_string("`base::t`"))
[`base::t`](https://rdrr.io/r/base/t.html)

> cat(downlit_md_string("```\nbase::t(1)\n```"))
<pre class='chroma'>
<span class='k'>base</span>::<span class='nf'><a href='https://rdrr.io/r/base/t.html'>t</a></span>(<span class='m'>1</span>)
</pre>

> # No transforms
> cat(downlit_md_string("## `base::t`"))
## `base::t`

> cat(downlit_md_string("[`base::t`](http://google.com)"))
[`base::t`](http://google.com)

> # Nested
> cat(downlit_md_string("*`base::t`*"))
*[`base::t`](https://rdrr.io/r/base/t.html)*

> cat(downlit_md_string("<span class='x'>`base::t`</span>"))
<span class='x'>[`base::t`](https://rdrr.io/r/base/t.html)</span>

> cat(downlit_md_string("1. `base::t`"))
1.  [`base::t`](https://rdrr.io/r/base/t.html)

> # Markdown extensions not in GFM
> cat(downlit_md_string("| `base::t`", format = "markdown"))
| [`base::t`](https://rdrr.io/r/base/t.html)

> md <- brio::read_lines(test_path("markdown-definition.md"))
> cat(downlit_md_string(md, "markdown"))
Term 1 ([`base::t()`](https://rdrr.io/r/base/t.html))

:   Definition 1 ([`base::t()`](https://rdrr.io/r/base/t.html))

